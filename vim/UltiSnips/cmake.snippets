snippet build "build.cmake"
# build.cmake

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
endif(NOT CMAKE_BUILD_TYPE)

if(NOT DEFINED BUILD_SHARED_LIBS)
  set(BUILD_SHARED_LIBS ON)
endif()

if(${CMAKE_BUILD_TYPE} STREQUAL Debug)
  enable_testing()
  include(CTest)
endif()


# TODO add flags for msvc
if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
else()
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -Wextra -Wshadow -Wnon-virtual-dtor -pedantic -g -O0")
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")


option(leak_check "set leak_check" 0)
option(profiling "set profiling" 0)
option(thread_check "set thread_check" 0)

if(${CMAKE_BUILD_TYPE} STREQUAL Debug AND leak_check)
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address -fno-omit-frame-pointer")
endif()

if(${CMAKE_BUILD_TYPE} STREQUAL Debug AND thread_check)
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=thread")
endif()

if(${CMAKE_BUILD_TYPE} STREQUAL Debug AND profiling)
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -pg")
  set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -pg")
  set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -pg")
  set(CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} -pg")
endif()


if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
endif()


message(STATUS "buid type        " ${CMAKE_BUILD_TYPE})
message(STATUS "Project          " ${PROJECT_NAME})
message(STATUS "c compiler       " ${CMAKE_C_COMPILER})
message(STATUS "cxx compiler     " ${CMAKE_CXX_COMPILER})
message(STATUS "build tests      " ${BUILD_TESTING})
message(STATUS "build shared     " ${BUILD_SHARED_LIBS})
message(STATUS "leak   sanitizer " ${leak_check})
message(STATUS "thread sanitizer " ${thread_check})
message(STATUS "profiling        " ${profiling})endsnippet

snippet cmake "cmake"
#cmake

cmake_minimum_required(VERSION 3.10)

project($1)

include(build.cmake)
include(doxygen.cmake)

set(LIST_SUBDIRS)
foreach(DIR ${LIST_SUBDIRS})
  add_subdirectory("src/${DIR}")
endforeach()

message(STATUS "SUBDIRECTORIES: ${LIST_SUBDIRS}")
endsnippet

snippet qt "qt"
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

find_package(Qt5Widgets REQUIRED)
endsnippet

snippet doxygen "doxygen.cmake"
# doxygen.cmake

find_package(Doxygen)

if(DOXYGEN_FOUND)
  set(DOXYGEN_DOXYFILE_ENCODING "UTF-8")
  set(DOXYGEN_PROJECT_NAME "\"${PROJECT_NAME}\"")
  set(DOXYGEN_PROJECT_NUMBER "${PROJECT_VERSION}")
  set(DOXYGEN_PROJECT_BRIEF "${PROJECT_NAME}")
  set(DOXYGEN_PROJECT_LOGO "")
  set(DOXYGEN_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/documentation")
  set(DOXYGEN_FILE_PATTERNS *.c *.cc *.cxx *.cpp *.c++ *.h *.hh *.hpp)
  set(DOXYGEN_RECURSIVE "YES")
  set(DOXYGEN_OPTIMIZE_OUTPUT_FOR_C "YES")
  set(DOXYGEN_CPP_CLI_SUPPORT "YES")
  set(DOXYGEN_CASE_SENSE_NAMES "NO")
  set(DOXYGEN_EXCLUDE_PATTERNS "*/build*/*" "*/test*/*")
  set(DOXYGEN_GENERATE_LATEX "NO")

  doxygen_add_docs(doxygen ${CMAKE_CURRENT_SOURCE_DIR} COMMENT "generate doxygen documentation by cmake")

  add_custom_target(documentation
    COMMAND doxygen "Doxyfile.doxygen"
    WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
    COMMENT "Generate doxygen documentation"
    )
endif()
endsnippet

snippet uninstall "uninstall.cmake"
if(NOT TARGET uninstall)
    configure_file(
        "${CMAKE_CURRENT_LIST_DIR}/cmake_uninstall.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
        IMMEDIATE @ONLY)

    add_custom_target(uninstall
        COMMAND ${CMAKE_COMMAND} -P
        ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
endif(NOT TARGET uninstall)
endsnippet
